// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  CREW
  PASSENGER
  FIRST_RESPONDERS
}

model User {
  userId      String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String   @unique
  password    String
  role        UserRole @default(PASSENGER)
  isVerified  Boolean  @default(false)
  isOnboarded Boolean  @default(false)

  organization   Organization? @relation(fields: [organizationId], references: [organizationId])
  organizationId String?       @db.ObjectId

  route Route?

  stop   Stop? @relation(fields: [stopId], references: [stopId])
  stopId String?       @db.ObjectId
}

enum OrganizationType {
  SCHOOL
  COLLEGE
  COMPANY
}

model Organization {
  organizationId      String           @id @default(auto()) @map("_id") @db.ObjectId
  orgName             String           @unique
  orgType             OrganizationType
  fleetsCount         Int
  routesCount         Int
  crewsCount          Int
  passengersCount     Int
  adminName           String
  adminEmail          String
  adminPhoneNumber    String
  altAdminPhoneNumber String
  addressLine1        String
  addressLine2        String?
  addressLine3        String?
  state               String
  city                String
  pincode             Int

  users  User[]
  fleets Fleet[]
  routes Route[]
  stops Stop[]
  trackinglogs trackinglogs[]
}

enum FleetType {
  BUS
  MINI_BUS
  VAN
}

enum FleetStatus {
  ACTIVE
  INACTIVE
  MAINTENANCE
  IDLE
}

model Fleet {
  fleetId     String      @id @default(auto()) @map("_id") @db.ObjectId
  fleetNumber String      @unique
  regNumber   String
  make        String
  model       String
  year        Int
  type        FleetType
  color       String
  status      FleetStatus
  fcExpDate   DateTime
  capacity    Int
  ac          Boolean

  organization   Organization? @relation(fields: [organizationId], references: [organizationId])
  organizationId String?       @db.ObjectId

  route Route?

  stop Stop?
}

model Route {
  routeId        String @id @default(auto()) @map("_id") @db.ObjectId
  routeName      String @unique
  passengerCount Int
  startTime      String
  endTime        String
  startPoint     String
  distance       Int
  duration       Int

  organization   Organization? @relation(fields: [organizationId], references: [organizationId])
  organizationId String?       @db.ObjectId

  driverId User?  @relation(fields: [userId], references: [userId], onDelete: NoAction, onUpdate: NoAction)
  userId String @unique @db.ObjectId

  route   Fleet? @relation(fields: [fleetId], references: [fleetId])
  fleetId String @unique @db.ObjectId

  stops Stop[]
}

model Stop {
  stopId             String @id @default(auto()) @map("_id") @db.ObjectId
  stopName       String @unique
  lat            Float
  lng            Float
  pickupTime     String
  dropTime       String
  passengerCount Int

  organization Organization? @relation(fields: [organizationId], references: [organizationId])
  organizationId String? @db.ObjectId

  route Route? @relation(fields: [routeId], references: [routeId], onDelete: NoAction, onUpdate: NoAction)
  routeId String @db.ObjectId

  fleet   Fleet? @relation(fields: [fleetId], references: [fleetId])
  fleetId String @unique @db.ObjectId

  users User[]
}

model trackinglogs {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  regNumber   String
  gpsDeviceId String
  routeNumber String
  timeStamp   DateTime
  latitude    Float
  longitude   Float

  organization Organization? @relation(fields: [organizationId], references: [organizationId])
  organizationId String? @db.ObjectId
}

model passengerlogs {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  uid           String
  name          String
  fleetNumber   String
  routeNumber   String
  boardingPoint String
  dropPoint     String
  bTimeStamp    DateTime
  dTimeStamp    DateTime
}
